export const posts = [
  {
    title: 'Que rumo vou seguir?',
    subtitle:
      'Voc√™ j√° deve ter se feito essa pergunta v√°rias vezes, ningu√©m tem a resposta 100% correta, mas sempre tem dicas, segue umas abaixo üëá',
    description: 'Voc√™ j√° deve ter se feito essa pergunta v√°rias vezes, ningu√©m tem a resposta 100% correta...',
    createdAt: new Date('2021-11-28'),
  },
  {
    title: 'Swagger Express',
    subtitle: 'Como usar express em seu aplicativo expressjs',
    description: 'Esse artigo tem a inten√ß√£o de te auxiliar na documenta√ß√£o com swagger e expressjs...',
    createdAt: new Date('2021-11-29'),
  },
] as Array<{ title: string; description: string; markdown: string; subtitle: string; createdAt: Date }>

export const markdowns = [
  `
Em um momento da vida especificamente quando voc√™ est√° se formando sempre come√ßam a te fazer perguntas como: "Iai, vai trabalhar onde?", "Vai fazer faculdade?", "Qual faculdade voc√™ vai fazer?"

S√£o perguntas extremamente comuns e muita das vezes os jovens n√£o possuem a resposta, principalmente na √°rea da tecnologia, temos diversos caminhos, diversas tecnologias, dentre diversas carreiras que d√° pra seguir.

E eu n√£o escapei desse processo, quando eu decidi que queria tra√ßar a carreira de tecnologia, tive problemas em qual profiss√£o me dedicaria, mas depois de estudar mais sobre as possibilidades, vi que o melhor para minhas habilidades seria engenharia de software, mas ai, me fiz mais uma duvida, qual linguagem?

Ap√≥s entender o que era ser um engenheiro de software eu precisava escolher uma linguagem de programa√ß√£o que atendesse os requisitos que eu precisava na √©poca, e sem foco, eu comecei a estudar PHP, Python, Html, Css, Javascript.

Por isso aqui est√° uma dica que pode te ajudar bastante:

* Foque em 1 coisa de cada vez, n√£o adianta voc√™ querer aprender tudo de uma vez que voc√™ n√£o vai conseguir, por√©m se voc√™ focar em apenas uma coisa e tente ser o melhor naquilo. 

Enfim n√£o adiantou tentar estudar todas essas linguagens de programa√ß√£o se eu n√£o estava focado, ap√≥s ver um an√∫ncio de uma escola de programa√ß√£o, resolvi fazer o desafio  que era um desafio de 1 semana codando em javascript usando os frameworks react-native, reactjs e nodejs. Mas a√≠ o problema veio novamente, ap√≥s o final de semana, o curso mais completo que eu precisaria para dar um up na minha carreira era pago e custava R$1900,00 que eu n√£o tinha na √©poca.

E a√≠ mais algumas dicas:

* Voc√™ nunca vai precisar de dinheiro para aprender, sempre h√° boas solu√ß√µes como youtube, stackoverflow, github entre outras ferramentas de aprendizagem gr√°tis.

* Tamb√©m √© sempre bom pedir ajuda para pessoas que voc√™ conhe√ßa e j√° seja da √°rea.

* Sempre d√° pra usar solu√ß√µes como o financiamento de cursos, para isso temos empresas como: [Provi](https://provi.com.br)  
`,
  `
## O que √© um Swagger?

Voc√™ j√° deve ter visto sobre Swagger, Swagger √© uma das ferramentas mais utilizadas para o desenvolvimento de OpenAPI Specification(OAS). Para documenta√ß√µes Swagger √© uma ferramenta extremamente poderosa auxiliando desenvolvedores a documentar suas APIs de uma forma muito simples, Swagger consegue ler a estrutura e criar documenta√ß√µes automaticamente, e tamb√©m fazer o oposto, lendo uma documenta√ß√£o e criando uma API.
 
Voc√™ pode gerar especifica√ß√µes como: opera√ß√µes da API, par√¢metros da API, retorno, Autoriza√ß√µes necess√°rias manualmente, bem como gerar automaticamente atrav√©s de coment√°rios no c√≥digo.
 
Documenta√ß√£o [aqui](https://swagger.io/)
 
E Hoje vamos ver como criar uma documenta√ß√£o atrav√©s de coment√°rios no c√≥digo.

Para come√ßar vamos criar um projeto e inici√°-lo.

~~~shell
  mkdir swagger_app
  cd swagger_app
  yarn init -y
~~~

Ap√≥s dar iniciar o projeto vamos criar a pasta source do projeto e vamos instalar as bibliotecas iniciais:

~~~shell
yarn add express cors http nodemon typescript @types/node ts-node express-promise-router @types/express @types/cors
~~~

E criamos o arquivo root do projeto, nesse caso index.ts , vamos criar ent√£o a configura√ß√£o b√°sica do express, como no exemplo:

~~~ts
import express from "express";
import cors from "cors";
import http from "http";

import { routes } from "./routes/index";

const port = 5000;

const app = express();
const server = http.createServer(app);

app.use(cors());
app.use(express.json({}));
app.use(express.urlencoded({ extended: true }));
app.use(routes);

server.listen(port, () => {
  console.log('We are live on \${port}/');
  console.log('Environment: production');
});
~~~

Nosso routes/index se parece com isso:

~~~ts
import Router from "express-promise-router";

const routes = Router();

routes.get("/users", (req, res) => {
  return res.json("OK");
});

export { routes };
~~~

Vamos criar os scripts para rodar o projeto

~~~json
"scripts": {
  "dev": "nodemon src/index.ts"
},
~~~

## Configurando swagger

Adicionando as bibliotecas necess√°rias

~~~shell
yarn add swagger-jsdoc swagger-ui-express @types/swagger-jsdoc @types/swagger-ui-express
~~~

Com isso vamos inserir a configura√ß√£o do swagger no root do projeto, vamos importar as duas bibliotecas que baixamos

~~~ts
import swaggerUI from "swagger-ui-express";
import swaggerJsDocs from "swagger-jsdoc";
~~~

E ent√£o adicionar as seguintes linhas:

~~~ts
const options = {
  definition: {
    openapi: "3.0.0",
    info: {
      title: "Library API",
      version: "1.0.0",
      description: "Api documentation",
    },
    servers: [{ url: "https://localhost:5000" }],
  },
  apis: ["src/routes/*.ts"],
};

const specs = swaggerJsDocs(options);

app.use("/docs", swaggerUI.serve, swaggerUI.setup(specs));
~~~

Agora rode o projeto e acesse [http://localhost:5000/docs](http://localhost:5000/docs), dessa forma voc√™ vai ver a tela inicial do swagger que √© constru√≠do automaticamente
 
Vamos ent√£o criar o nosso primeiro schema dentro de routes/index

~~~ts
/**
 * @swagger
 * components:
 *   schemas:
 *     User:
 *       type: object
 *       required:
 *         - fullName
 *       properties:
 *         id:
 *           type: string
 *           description: The auto-generated id of the user
 *         fullName:
 *           type: string
 *           description: The name of user
 *       example:
 *         id: 60ff3fe25a1209001eadefb5
 *         fullName: Alexander K. Dewdney
 */
~~~

Ap√≥s isso j√° aparece os schemas que voc√™ criou, e ent√£o vamos finalmente documentar a nossa rota, adicionando as linhas

~~~ts
/**
 * @swagger
 * /users:
 *   get:
 *     summary: Return ok
 *     tags: [User]
 *     responses:
 *       200:
 *         description: Return ok
 *         content:
 *           application/json:
 *             schema:
 *               type: string
 *               items:
 *                "OK"
 */
~~~

Dessa forma sua primeira rota foi documentada e prontinho, sua primeira documenta√ß√£o com swagger foi feita.
`,
] as Array<string>
